package pdfCreator;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Locale;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.List;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfPageEventHelper;
import com.itextpdf.text.pdf.PdfWriter;

import application.domain.Product;
import javafx.collections.ObservableList;
import utils.Utils;

public class PDFCreator extends PdfPageEventHelper {

	private LocalDateTime ldt;

	private String title = "Wycena wybranych produktów";
	private String filepath = "C:\\Users\\acer\\Downloads\\";

	private double shippingCost = 12.0;
	private Double productPrice = 0.0;
	private String currency = "PLN";

	private java.util.List<Product> items;

	private Font catFont;
	private Font dateCatFont;
	private Font redFont;
	private Font smallBold;

	public PDFCreator() {
		ldt = LocalDateTime.now();
	}

	public void createPDF() throws DocumentException, FileNotFoundException, IOException {
		calcTotalPrice();
		Document document = new Document(PageSize.LETTER);
		PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(filepath.concat(title).concat(".pdf")));
		writer.setPageEvent(new PDFCreator());
		document.open();
		addFonts();
		addMetaData(document);
		addTitlePage(document);
		document.close();
	}

	private void addFonts() throws DocumentException, IOException {
		BaseFont bf = BaseFont.createFont("c:/windows/fonts/arial.ttf", BaseFont.IDENTITY_H, BaseFont.EMBEDDED);
		catFont = new Font(bf, 18, Font.BOLD);
		dateCatFont = new Font(bf, 18, Font.BOLD);
		redFont = new Font(bf, 12, Font.NORMAL, BaseColor.RED);
		smallBold = new Font(bf, 12, Font.BOLD);
	}

	// iText allows to add metadata to the PDF which can be viewed in your Adobe
	// Reader
	// under File -> Properties
	private void addMetaData(Document document) {
		document.addTitle(title);
		document.addAuthor("SpiroPrint");
		document.addCreator("SpiroPrint");
	}

	private void addTitlePage(Document document) throws DocumentException {
		String rightShift = "                                ";
		Paragraph header = new Paragraph("Wycena na dzień ", catFont);
		header.add(new Chunk(getDate(), dateCatFont));
		Paragraph content = new Paragraph();
		Paragraph expirationDate = new Paragraph();
		//Show price
		String shipCost, totalPrice;
		if(getCurrency() == "PLN") {
			shipCost = getRoundedUpShippingCostPLN();
			totalPrice = getTotalPricePLN();
		} else {
			shipCost = getRoundedUpShippingCostEUR();
			totalPrice = getTotalPriceEUR();
		}
		
		Paragraph pricingShippingCost = new Paragraph("Koszt wysyłki " + shipCost + rightShift, smallBold);
		Paragraph pricingSum = new Paragraph("Suma " + totalPrice + rightShift, smallBold);

		pricingShippingCost.setAlignment(Element.ALIGN_RIGHT);
		pricingSum.setAlignment(Element.ALIGN_RIGHT);
		Paragraph finalNote = new Paragraph();

		addEmptyLine(content, 1);


		addEmptyLine(content, 3);

		content.add(new Paragraph("Wybrane produkty: ", smallBold));

		List prodList = new List();
		prodList.setListSymbol(new Chunk("        \u2022 ", smallBold));

		for (Product p : getItems()) {
			prodList.add(p.getName() + " " + p.getQuantity() + " szt.");
		}

		addEmptyLine(pricingSum, 1);

		addEmptyLine(expirationDate, 8);

		expirationDate.add(new Paragraph("Wycena ważna 3 dni.", redFont));

		addEmptyLine(expirationDate, 1);

		finalNote.add(new Paragraph(
				"* This document is a preliminary version and not subject to your license agreement or any other agreement with vogella.com ;-).",
				redFont));
		finalNote.setIndentationLeft(20);

		document.add(header);
		document.add(content);
		document.add(prodList);
		document.add(pricingShippingCost);
		document.add(pricingSum);
		document.add(expirationDate);
		document.add(finalNote);
		// Start a new page
		document.newPage();
	}

	private void addEmptyLine(Paragraph paragraph, int number) {
		for (int i = 0; i < number; i++) {
			paragraph.add(new Paragraph(" "));
		}
	}

	private String getDate() {
		return DateTimeFormatter.ofPattern("dd.MM.yyyy", Locale.ENGLISH).format(ldt);
	}

	@Override
	public void onEndPage(PdfWriter writer, Document document) {

		//PdfContentByte cb = writer.getDirectContent();

		// header content
		//String footerContent = "Report generated by: " + System.getProperty("user.name") + ", " + new Date();

		//System.out.println("footer: " + cb.getPdfDocument().getRole());
		/*
		 * Foooter
		 */
		//ColumnText.showTextAligned(cb, Element.ALIGN_RIGHT, new Phrase(footerContent, smallBold), document.right() - 2,
		//		document.bottom() - 20, 0);
	}

	public double getShippingCost() {
		return shippingCost;
	}

	public String getRoundedUpShippingCostPLN() {
		return Utils.formatMoneyValues(shippingCost).concat(" PLN");
	}

	public String getRoundedUpShippingCostEUR() {
		return Utils.formatMoneyValues(Utils.PLNToEUR(shippingCost)).concat(" EUR");
	}

	public PDFCreator setShippingCost(double shippingCost) {
		this.shippingCost = shippingCost;
		return this;
	}

	private Double calcTotalPrice() {
		return Double.sum(getProductPrice(), Utils.roundUp(shippingCost));
	}

	public String getTotalPricePLN() {
		return getFormattedProfit(calcTotalPrice()).concat(" PLN");
	}

	public String getTotalPriceEUR() {
		return getFormattedProfit(Utils.PLNToEUR(calcTotalPrice())).concat(" EUR");
	}

	private String getFormattedProfit(Double profit) {
		return Utils.formatMoneyValues(Double.valueOf(profit));
	}

	public PDFCreator setProductPrice(Double productPrice) {
		this.productPrice = productPrice;
		return this;
	}

	private Double getProductPrice() {
		return productPrice;
	}

	public String getTitle() {
		return title;
	}

	public PDFCreator setTitle(String title) {
		this.title = title;
		return this;
	}

	public String getFilepath() {
		return filepath;
	}

	public PDFCreator setFilepath(String filepath) {
		this.filepath = filepath;
		return this;
	}

	public PDFCreator setItems(ObservableList<Product> items) {
		this.items = items;
		return this;
	}

	public java.util.List<Product> getItems() {
		return items;
	}
	
	public String getCurrency() {
		return currency;
	}

	public PDFCreator setCurrency(String currency) {
		this.currency = currency;
		return this;
	}
}
